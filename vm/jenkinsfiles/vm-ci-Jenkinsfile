def setDockerImage(){
	def imageNameGradle = "nexus.dspace.kt.co.kr/devspace/projects/robotplatform:jdk17-gradle7.4.2"
	def imageNameNpm = "devspace/agent/node:20.11.1"
	def buildToolName = "${env.BUILD_TOOL}"

	if (buildToolName == "gradle") {
		return imageNameGradle
	} else if (buildToolName == "npm") {
		return imageNameNpm
	}

	return error("[오류] BuildTool이 올바르지 않습니다.")
}

pipeline
{
	agent
	{
		docker
		{
			image setDockerImage()
			args '-u root:root -v /var/run/docker.sock:/var/run/docker.sock'
			registryUrl 'https://nexus.dspace.kt.co.kr'
			registryCredentialsId 'devSpaceCICD_Nexus'
		}
	}

	options
	{
		timestamps()
	}

	environment
	{

		// Build Parameter
		MODULE_NAME		= "${env.MODULE_NAME}"
		BUILD_VERSION	= "${env.BUILD_VERSION}"
		BRANCH_NAME		= getBranchName("${env.BRANCH_NAME}")
		BUILD_TOOL		= "${env.BUILD_TOOL}"
		BUILD_OPTION	= "${env.BUILD_OPTION}"

		// 추가 파라미터
		ARTIFACT_NAME	= "${env.ARTIFACT_NAME}"
		ARTIFACT_PATH	= "${env.ARTIFACT_PATH}"
		GROUP_ID		= "${env.GROUP_ID}"

		// Etc Variable
		GIT_NAMESPACE	= "${env.NAMESPACE}"
		NEXUS_NAMESPACE	= getLowerCase(GIT_NAMESPACE)
		ARCHIVE			= "${env.ARCHIVE}"

		// Git Variable
		GIT_URL			= 'gitlab.dspace.kt.co.kr'
		GIT_PRJT_URL	= "${GIT_URL}/${GIT_NAMESPACE}/${MODULE_NAME}.git"
		GIT_CRED_ID		= "${env.GIT_CRED_ID}"
		GIT_TAG_NAME	= "${BRANCH_NAME}-${BUILD_VERSION}"

		// Nexus Variable
		NEXUS_URL		= 'https://nexus.dspace.kt.co.kr'
		NEXUS_IMG_NAME	= "${NEXUS_NAMESPACE}/${MODULE_NAME}"
		NEXUS_API_URL	= "${NEXUS_URL}/service/rest/v1/search"
		NEXUS_CRED_ID	= "${env.NEXUS_CRED_ID}"

	}

	stages
	{

		stage ( 'Version Check' )
		{
			steps
			{
				echo '==================== [VERSION CHECK 시작] ===================='

				script
				{
					if ( BUILD_VERSION == null )
					{
						error("[오류] 빌드 버전을 입력해야 합니다.")
					}
				}

				printMsg([
					"[빌드정보]",
					"모듈명         : "	+ MODULE_NAME,
					"넥서스이미지명  : "	+ NEXUS_IMG_NAME,
					"빌드버전       : "	+ BUILD_VERSION,
					"브랜치         : "	+ BRANCH_NAME
				])

				echo '==================== [VERSION CHECK 종료] ===================='
			}

		}


		stage ( 'Image Check' )
		{
			steps
			{
				echo '==================== [IMAGE CHECK 시작] ===================='

				script
				{
					withCredentials([usernamePassword(credentialsId: NEXUS_CRED_ID , usernameVariable: 'CRED_USR' , passwordVariable: 'CRED_PSW')])
					{
						def paramters	= "repository=maven-releases&group=${GROUP_ID}&name=${ARTIFACT_NAME}&version=${BUILD_VERSION}"
						def response	= sh(script: "curl -X GET -s -u ${CRED_USR}:${CRED_PSW} '${NEXUS_API_URL}?${paramters}'", returnStdout: true).trim()
						def json		= new groovy.json.JsonSlurper().parseText(response)

						if ( json.items.size() != 0 )
						{
							printMsg([
								"[오류] 이미 존재하는 버전입니다.",
								"[이미지명:버전] " + NEXUS_IMG_NAME + ":" + BUILD_VERSION
							])

							error("[오류] 이미 존재하는 버전입니다.")
						}
					}
				}

				echo '==================== [IMAGE CHECK 종료] ===================='
			}
		}


		stage ( 'Source Clone' )
		{
			steps
			{
				echo '==================== [SOURCE CLONE 시작] ===================='

				withCredentials([usernamePassword(credentialsId: GIT_CRED_ID , usernameVariable: 'CRED_USR' , passwordVariable: 'CRED_PSW')])
				{
					sh '''
						mkdir -p ${WORKSPACE}/${MODULE_NAME}
						cd ${WORKSPACE}/${MODULE_NAME}
	
						git config --global user.email "${GIT_NAMESPACE}@kt.com"
						git config --global user.name "${GIT_NAMESPACE}"
	
						if [ -d ./.git ]; then
							git remote update
							git checkout ${BRANCH_NAME}
							git fetch --prune origin
							git reset --hard origin/${BRANCH_NAME}
						else
							git clone "https://${CRED_USR}:${CRED_PSW}@${GIT_PRJT_URL}" .
						fi
					'''
				}

				echo '==================== [SOURCE CLONE 종료] ===================='
			}
		}


		stage ( 'Devops Clone' )
		{
			steps
			{
				echo '==================== [DEVOPS CLONE 시작] ===================='

				withCredentials([usernamePassword(credentialsId:GIT_CRED_ID,usernameVariable: 'CRED_USR', passwordVariable: 'CRED_PSW')])
				{
					sh '''
						mkdir -p ${WORKSPACE}/devops
						cd ${WORKSPACE}/devops
	
						if [ -d ./.git ]; then
							git checkout main
							git fetch --prune origin
							git reset --hard origin/main
						else
							git clone -b main "https://${CRED_USR}:${CRED_PSW}@${GIT_URL}/${GIT_NAMESPACE}/devops.git" .
						fi
					'''
				}

				echo '==================== [DEVOPS CLONE 종료] ===================='
			}
		}


		stage ( 'Image Build' )
		{
			steps
			{
				echo '==================== [IMAGE BUILD 시작] ===================='

				sh '''
					cd ${WORKSPACE}/${MODULE_NAME}
					git checkout ${BRANCH_NAME}
					
					if [ "${BUILD_TOOL}" == "gradle" ]; then
						cp ${WORKSPACE}/devops/etc/gradle.properties ${WORKSPACE}/${MODULE_NAME}
						chmod 751 ./gradlew
						./gradlew -debug clean build ${BUILD_OPTION} -xtest -b build.gradle --gradle-user-home=${WORKSPACE}
					else
						mvn clean package ${BUILD_OPTION} -DskipTests=true --settings=${WORKSPACE}/devops/etc/settings.xml
					fi
				'''

				echo '==================== [IMAGE BUILD 종료] ===================='
			}

		}

		stage ( 'Image Push' )
		{
			steps
			{
				echo '==================== [IMAGE PUSH 시작] ===================='

				sh '''
					cd ${WORKSPACE}/${MODULE_NAME}
					
					./gradlew publish -PmyVersion=${BUILD_VERSION}
				'''
				
				withCredentials([usernamePassword(credentialsId: GIT_CRED_ID , usernameVariable: 'CRED_USR' , passwordVariable: 'CRED_PSW')])
				{
					sh '''
						cd ${WORKSPACE}/${MODULE_NAME}

						git config --global user.email "${NAMESPACE}@kt.com"
						git config --global user.name "${NAMESPACE}"
						git checkout ${BRANCH_NAME}

						if [ ! -z $(git tag -l "${GIT_TAG_NAME}") ] ; then
							git tag --delete ${GIT_TAG_NAME}
							git push https://${CRED_USR}:${CRED_PSW}@${GIT_PRJT_URL} --delete ${GIT_TAG_NAME}
						fi

						git tag ${GIT_TAG_NAME}
						git push https://${CRED_USR}:${CRED_PSW}@${GIT_PRJT_URL} ${GIT_TAG_NAME}
					'''
				}

				echo '==================== [IMAGE PUSH 종료] ===================='
			}
		}


	}

	post
	{
		always
		{
			echo '==================== [빌드종료] ===================='
		}
		success
		{
			echo '==================== [빌드성공] ===================='
		}
		failure
		{
			echo '==================== [빌드실패] ===================='
		}
	}

}

def printMsg(msgList)
{

	String text = "=================================================\n"

	for ( msg in msgList )
	{
		text += " > " + msg + "\n"
	}

	text += "=================================================\n"

	echo text

}


def getBranchName(branchParam)
{

	def branchNames = branchParam.split ( '/' ) 

	if ( branchNames.length != 2 )
	{
		error("[오류] 브랜치 정보가 유효하지 않습니다.[브랜치] : ${branchParam}")
	}

	return branchNames[1]

}


def getLowerCase(namespace)
{

	return namespace.toLowerCase()

}

