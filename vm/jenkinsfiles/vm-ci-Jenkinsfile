pipeline 
{
    
	agent any
    
	options
	{
		timestamps()
	}

	environment
	{

		// Build Parameter
		MODULE_NAME		= "${env.MODULE_NAME}"
		BUILD_VERSION	= "${env.BUILD_VERSION}"
	// 	BRANCH_NAME		= getBranchName("${env.BRANCH_NAME}")
	// 	BUILD_TOOL		= "${env.BUILD_TOOL}"
	// 	BUILD_OPTION	= "${env.BUILD_OPTION}"

	// 	// 추가 파라미터
	// 	ARTIFACT_NAME	= "${env.ARTIFACT_NAME}"
	// 	ARTIFACT_PATH	= "${env.ARTIFACT_PATH}"
	// 	GROUP_ID		= "${env.GROUP_ID}"

	// 	// Etc Variable
	// 	GIT_NAMESPACE	= "${env.NAMESPACE}"
	// 	NEXUS_NAMESPACE	= getLowerCase(GIT_NAMESPACE)
	// 	ARCHIVE			= "${env.ARCHIVE}"

	// 	// Git Variable
	// 	GIT_URL			= 'gitlab.dspace.kt.co.kr'
	// 	GIT_PRJT_URL	= "${GIT_URL}/${GIT_NAMESPACE}/${MODULE_NAME}.git"
	// 	GIT_CRED_ID		= "${env.GIT_CRED_ID}"
	// 	GIT_TAG_NAME	= "${BRANCH_NAME}-${BUILD_VERSION}"

	// 	// Nexus Variable
	// 	NEXUS_URL		= 'https://nexus.dspace.kt.co.kr'
	// 	NEXUS_IMG_NAME	= "${NEXUS_NAMESPACE}/${MODULE_NAME}"
	// 	NEXUS_API_URL	= "${NEXUS_URL}/service/rest/v1/search"
	// 	NEXUS_CRED_ID	= "${env.NEXUS_CRED_ID}"

	}

    stages 
	{
        stage ( 'Version Check' ) 
		{
            steps 
			{
				echo '==================== [VERSION CHECK 시작] ===================='

				script
				{
					if ( BUILD_VERSION == null )
					{
						error("[오류] 빌드 버전을 입력해야 합니다.")
					}
				}

				printMsg([
					"[빌드정보]",
					"모듈명         : "	+ MODULE_NAME,
					"넥서스이미지명  : "	+ NEXUS_IMG_NAME,
					"빌드버전       : "	+ BUILD_VERSION,
					"브랜치         : "	+ BRANCH_NAME
				])

				echo '==================== [VERSION CHECK 종료] ===================='
            }
        }
        
		stage ( 'Image Check' )
		{
            steps 
			{
                echo '==================== [IMAGE CHECK 시작] ===================='

				echo '==================== [IMAGE CHECK 종료] ===================='
            }
        }
        
		stage ( 'Source Clone' )
		{
            steps 
			{
                echo '==================== [SOURCE CLONE 시작] ===================='


				echo '==================== [SOURCE CLONE 종료] ===================='
            }
        }

		stage ( 'Devops Clone' )
		{
			steps 
			{
				echo '==================== [DEVOPS CLONE 시작] ===================='

				echo '==================== [DEVOPS CLONE 종료] ===================='
			}

		}

		stage ( 'Image Build' )
		{
			steps
			{
				echo '==================== [IMAGE BUILD 시작] ===================='

				echo '==================== [IMAGE BUILD 종료] ===================='
			}

		}

		stage ( 'Image Push' )
		{
			steps
			{
				echo '==================== [IMAGE PUSH 시작] ===================='

				echo '==================== [IMAGE PUSH 종료] ===================='
			}


		}
    }

	post
	{
		always
		{
			echo '==================== [빌드종료] ===================='
		}
		success
		{
			echo '==================== [빌드성공] ===================='
		}
		failure
		{
			echo '==================== [빌드실패] ===================='
		}
	}
}

def printMsg(msgList)
{

	String text = "=================================================\n"

	for ( msg in msgList )
	{
		text += " > " + msg + "\n"
	}

	text += "=================================================\n"

	echo text

}


def getBranchName(branchParam)
{

	def branchNames = branchParam.split ( '/' ) 

	if ( branchNames.length != 2 )
	{
		error("[오류] 브랜치 정보가 유효하지 않습니다.[브랜치] : ${branchParam}")
	}

	return branchNames[1]

}


def getLowerCase(namespace)
{

	return namespace.toLowerCase()

}